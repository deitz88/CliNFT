{"version":3,"sources":["utils/tokenService.js","utils/userService.js","components/ErrorMessage/ErrorMessage.jsx","pages/SignupPage/SignupPage.jsx","components/MOLECULES/HeaderImage.jsx","pages/LoginPage/LoginPage.jsx","components/Navbar/Dropdown/Dropdown.jsx","components/MOLECULES/WelcomeHeader.jsx","components/Wallet/Wallet.jsx","components/Navbar/Navbar.jsx","components/SuccessMessage/SuccessMessage.jsx","utils/clientService.js","utils/trialsService.js","pages/AddClient/AddClient.jsx","pages/AddTrial/AddTrial.jsx","components/Find/Trials/TrialsFind.jsx","pages/Find/Find.jsx","pages/Home/Home.jsx","pages/App/App.jsx","serviceWorker.js","index.js"],"names":["getToken","token","localStorage","getItem","JSON","parse","window","atob","split","exp","Date","now","removeItem","setToken","setItem","removeToken","getUserFromToken","user","BASE_URL","signup","fetch","method","body","stringify","headers","then","res","ok","json","status","Error","tokenService","logout","login","creds","Headers","getUser","ErrorMessage","props","className","error","SignUpPage","console","log","handleSignUpOrLogin","history","useHistory","useState","setError","employeeId","password","confirmPassword","email","accessToken","formInput","setFormInput","handleInput","e","target","name","value","handleValidation","formIsValid","validator","isNumeric","lastAtPos","lastIndexOf","lastDotPos","indexOf","length","isStrongPassword","minLength","minLowercase","minUppercase","minNumbers","minSymbols","returnScore","pointsPerUnique","pointsPerRepeat","pointsForContainingLower","pointsForContainingUpper","pointsForContainingNumber","pointsForContainingSymbol","equals","a","preventDefault","userService","push","message","useEffect","timer","setTimeout","clearTimeout","Grid","textAlign","style","margin","verticalAlign","Column","maxWidth","Header","as","color","to","Icon","id","Form","autoComplete","onSubmit","Input","placeholder","onChange","required","type","fontSize","Button","HeaderImage","src","alt","width","LoginPage","Dropdown","setShow","handleLogout","closeDropdown","handleClickOutside","onClick","clickOutsideConfig","onClickOutside","Wallet","wallet","connect","ethereum","requestPermissions","data","height","position","left","padding","top","backgroundColor","Navbar","show","location","useLocation","hover","setHover","handleHover","onMouseOver","onMouseOut","size","pathname","SuccessMessage","success","Authorization","addClient","addTrial","getTrials","findClients","AddClient","trials","setTrials","loading","setLoading","setSuccess","setName","walletAddress","percentageParticipated","trialIdentification","ethers","utils","getAddress","argument","code","client","NFTStorage","store","description","image","File","metadata","url","clientService","toString","msg","trialsService","Loader","active","marginRight","borderRadius","Checkbox","Field","disabled","Select","options","map","trial","key","_id","text","Slider","defaultValue","step","marks","min","max","valueLabelDisplay","AddTrial","TrialsFind","currentTrial","setCurrentTrial","clients","setClients","backendPayload","arr","payload","trialId","participants","percentByTrial","i","percentageCompleted","clientPayload","forEach","err","Table","unstackable","celled","compact","Row","HeaderCell","Body","Cell","Footer","Find","Segment","marginTop","border","Home","marginBottom","App","currentWallet","setCurrentWallet","currentAccount","handleAccountsChanged","accounts","request","catch","setUser","exact","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9adfa6e4.chunk.js","sourcesContent":["function setToken(token) {\n  if (token) {\n    // localStorage is given to us by the browser\n    localStorage.setItem('token', token);\n  } else {\n    localStorage.removeItem('token');\n  }\n}\n\nfunction getToken() {\n  let token = localStorage.getItem('token');\n  if (token) {\n    // Check if expired, remove if it is\n    // atob is a function that decodes a base-64 string\n    const payload = JSON.parse(window.atob(token.split('.')[1]));\n    // JWT's exp is expressed in seconds, not milliseconds, so convert\n    if (payload.exp < Date.now() / 1000) {\n      localStorage.removeItem('token');\n      token = null;\n    }\n  }\n  return token;\n}\n\nfunction getUserFromToken() {\n  const token = getToken();\n  return token ? JSON.parse(atob(token.split('.')[1])).user : null;\n}\n\nfunction removeToken() {\n  localStorage.removeItem('token');\n}\n\nexport default {\n  setToken,\n  getToken,\n  removeToken,\n  getUserFromToken\n};","import tokenService from './tokenService';\n\nconst BASE_URL = '/api/users/';\n\nfunction signup(user) {\n  return fetch(BASE_URL + \"signup\", {\n    method: \"POST\",\n    body: JSON.stringify(user),\n    headers: { \"Content-type\": \"application/json\" },\n  })\n    .then((res) => {\n      if (res.ok) {\n        return res.json()\n      } else if (res.status == 401) {\n        throw new Error('Invalid Access Token')\n      } else if (res.status == 455) {\n        throw new Error('Employee ID Already Taken')\n      } else {\n        throw new Error('Email Already Taken');\n      }\n\n    })\n    .then(({ token }) => tokenService.setToken(token));\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nfunction login(creds) {\n  return fetch(BASE_URL + 'login', {\n    method: 'POST',\n    headers: new Headers({ 'Content-Type': 'application/json' }),\n    body: JSON.stringify(creds)\n  })\n    .then(res => {\n      // Valid login if we have a status of 2xx (res.ok)\n      if (res.ok) return res.json();\n      throw new Error('Bad Credentials!');\n    })\n    .then(({ token }) => tokenService.setToken(token));\n}\n\n\nexport default {\n  signup,\n  logout,\n  login,\n  getUser\n};\n\n","import React from 'react';\nimport './ErrorMessage.css'\n\nexport default function ErrorMessage(props) {\n    return (\n        <span className={\"error\"}>{props.error}</span>\n    )\n}","import React, { useState, useEffect } from \"react\";\nimport { Link } from 'react-router-dom'\nimport { Grid, Header, Form, Segment, Button, Icon } from \"semantic-ui-react\";\nimport userService from \"../../utils/userService\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./SignupPage.css\";\nimport validator from 'validator';\nimport ErrorMessage from '../../components/ErrorMessage/ErrorMessage'\n\nexport default function SignUpPage(props) {\n    console.log(props.handleSignUpOrLogin())\n    const history = useHistory();\n    const [error, setError] = useState('')\n    const [formInput, setFormInput] = useState({\n        employeeId: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n        email: \"\",\n        accessToken: ''\n    });\n\n    function handleInput(e) {\n        setFormInput({\n            ...formInput,\n            [e.target.name]: e.target.value,\n        });\n    }\n\n\n    function handleValidation() {\n        let formIsValid = true;\n\n        //Employee ID\n\n        if (typeof formInput.employeeId !== \"undefined\") {\n            if (!validator.isNumeric(formInput.employeeId)) {\n                formIsValid = false;\n                setError('ID must be numbers only')\n            }\n        }\n\n        //Email\n\n        if (typeof formInput.email !== \"undefined\") {\n            let lastAtPos = formInput.email.lastIndexOf(\"@\");\n            let lastDotPos = formInput.email.lastIndexOf(\".\");\n\n            if (\n                !(\n                    lastAtPos < lastDotPos &&\n                    lastAtPos > 0 &&\n                    formInput.email.indexOf(\"@@\") == -1 &&\n                    lastDotPos > 2 &&\n                    formInput.email.length - lastDotPos > 2\n                )\n            ) {\n                formIsValid = false;\n                setError('Please enter a vaild email')\n            }\n        }\n        // Password\n        if (typeof formInput.password !== \"undefined\") {\n            if (!validator.isStrongPassword(formInput.password, {\n                minLength: 8,\n                minLowercase: 1,\n                minUppercase: 1,\n                minNumbers: 1,\n                minSymbols: 0,\n                returnScore: false,\n                pointsPerUnique: 1,\n                pointsPerRepeat: 0.5,\n                pointsForContainingLower: 10,\n                pointsForContainingUpper: 10,\n                pointsForContainingNumber: 10,\n                pointsForContainingSymbol: 10\n            })) {\n                formIsValid = false;\n                setError(`Password must be 8 characters\n                and must contain at least 1: uppercase, lowercase, and number`)\n            }\n        }\n\n        //Confirm Password\n        if (typeof formInput.confirmPassword !== \"undefined\") {\n            if (!validator.equals(formInput.confirmPassword, formInput.password)) {\n                formIsValid = false;\n                setError('Passwords do not match')\n            }\n        }\n        return formIsValid;\n    }\n\n    async function handleSubmit(e) {\n        e.preventDefault();\n        if (handleValidation()) {\n            try {\n                await userService.signup(formInput);\n                await props.handleSignUpOrLogin\n                history.push('/profile')\n            } catch (err) {\n                setError(err.message)\n            }\n        }\n    }\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setError(null);\n        }, 3000);\n        return () => clearTimeout(timer);\n    }, [error]);\n\n    return (\n        <>\n            <Grid\n                textAlign=\"center\"\n                style={{ margin: \"1em\" }}\n                verticalAlign=\"middle\"\n            >\n                <Grid.Column style={{ maxWidth: 700 }} className=\"signupForm\">\n                    <Header as=\"h2\" color=\"blue\" textAlign=\"center\">\n                        <span className=\"signupText\">Register </span>\n                        <i>\n                            <u>\n                                <Link to='/login' style={{ color: 'black' }}>\n                                    <span className='loginText'>Login</span>\n                                    <span className='loginTextIcon'><Icon id='loginIcon' className='long arrow alternate right' /></span>\n                                </Link>\n                            </u>\n                        </i>\n                    </Header>\n\n                    <br />\n                    <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n                        <label className='formLabel'>Employee ID </label>\n                        <Form.Input\n                            name=\"employeeId\"\n                            placeholder=\"Employee ID\"\n                            value={formInput.employeeId}\n                            onChange={handleInput}\n                            required\n                        />\n                        <label className='formLabel'>Company Email</label>\n                        <Form.Input\n                            type=\"email\"\n                            name=\"email\"\n                            placeholder=\"Email\"\n                            value={formInput.email}\n                            onChange={handleInput}\n                            required\n                        />\n                        <br />\n                        <label className='formLabel'>Access Token</label>\n                        <Form.Input\n                            type=\"accessToken\"\n                            name=\"accessToken\"\n                            placeholder=\"Access Token\"\n                            value={formInput.accessToken}\n                            onChange={handleInput}\n                            required\n                        />\n                        <br />\n                        <label className='formLabel'>Password <br /> <span style={{ fontSize: '8px' }}>must contain at least 1: uppercase, lowercase, number</span></label>\n                        <Form.Input\n                            name=\"password\"\n                            type=\"password\"\n                            placeholder=\"Password\"\n                            value={formInput.password}\n                            onChange={handleInput}\n                            required\n                        />\n                        <Form.Input\n                            name=\"confirmPassword\"\n                            type=\"password\"\n                            placeholder=\"Confirm Password\"\n                            value={formInput.confirmPassword}\n                            onChange={handleInput}\n                            required\n                        />\n\n                        <ErrorMessage error={error} />\n                        <br />\n                        <Button type=\"submit\" className=\"btn\" id=\"signupButton\">\n                            Register\n                        </Button>\n                    </Form>\n                </Grid.Column>\n            </Grid>\n        </>\n    );\n}\n","import React from \"react\";\n\n\n\n\nexport default function HeaderImage() {\n\n    return (\n        <img\n            src={process.env.PUBLIC_URL + '/navbarImage.png'}\n            alt='doctor healthcare image'\n            style={{ width: '100vw' }} />\n    )\n}","import React, { useState, useEffect } from \"react\";\nimport { Link } from 'react-router-dom'\nimport { useHistory } from \"react-router-dom\";\nimport \"./LoginPage.css\";\nimport ErrorMessage from \"../../components/ErrorMessage/ErrorMessage\";\nimport userService from \"../../utils/userService\";\nimport {\n    Grid,\n    Form,\n    Header,\n    Button,\n    Icon,\n} from \"semantic-ui-react\";\nimport HeaderImage from \"../../components/MOLECULES/HeaderImage\";\n\nexport default function LoginPage(props) {\n    const history = useHistory();\n    const [error, setError] = useState(\"\");\n    const [formInput, setFormInput] = useState({\n        password: \"\",\n        email: \"\",\n    });\n    function handleInput(e) {\n        setFormInput({\n            ...formInput,\n            [e.target.name]: e.target.value,\n        });\n    }\n\n    async function handleSubmit(e) {\n        e.preventDefault();\n\n        try {\n            await userService.login(formInput);\n            props.handleSignUpOrLogin();\n            history.push(\"/index\");\n        } catch (err) {\n            setError(err.message);\n        }\n    }\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setError(null);\n        }, 3000);\n        return () => clearTimeout(timer);\n    }, [error]);\n\n    return (\n        <>\n            <Grid\n                textAlign=\"center\"\n                style={{ margin: \"1em\" }}\n                verticalAlign=\"middle\"\n            >\n                <Grid.Column style={{ maxWidth: 450 }}>\n                    <Header as=\"h2\" color=\"blue\" textAlign=\"center\">\n                        <span className=\"signupText\">Login </span>\n                        <i>\n                            <Link to='/register' style={{ color: 'black' }}>\n                                <span className='loginText'>or <u>Register</u></span>\n                                <span className='loginTextIcon'><Icon id='loginIcon' className='long arrow alternate right' /></span>\n                            </Link>\n                        </i>\n                    </Header>\n                    <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n                        <label className='formLabel'>Email</label>\n                        <Form.Input\n                            type=\"email\"\n                            name=\"email\"\n                            placeholder=\"email\"\n                            value={formInput.email}\n                            onChange={handleInput}\n                            required\n                        />\n                        <label className='formLabel'>Password</label>\n                        <Form.Input\n                            name=\"password\"\n                            type=\"password\"\n                            placeholder=\"password\"\n                            value={formInput.password}\n                            onChange={handleInput}\n                            required\n                        />\n                        <Button type=\"submit\" className=\"btn\" id=\"signupButton\">\n                            Login\n                        </Button>\n                    </Form>\n\n                    {error ? <ErrorMessage error={error} /> : null}\n                </Grid.Column>\n            </Grid>\n        </>\n    );\n}\n","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\n// import './Navbar.css'\nimport onClickOutside from \"react-onclickoutside\";\n\nfunction Dropdown({ setShow, handleLogout }) {\n    Dropdown.handleClickOutside = () => setShow(false);\n\n    function closeDropdown() {\n        setShow(false)\n    }\n\n\n\n    return (\n        <div id='dropdown'>\n            <Link id='addClientButton' className='dropdownItem' to='/addclient' onClick={closeDropdown}>Add Client</Link>\n            <Link id='addClientButton' className='dropdownItem' to='/addtrial' onClick={closeDropdown}>Add Trial</Link>\n            <Link id='addClientButton' className='dropdownItem' to='/find' onClick={closeDropdown}>Client per Trial</Link>\n\n            <Link id='logoutButton' className='dropdownItem' to='/index' onClick={handleLogout}>Logout</Link>\n        </div>\n\n    )\n}\nconst clickOutsideConfig = {\n    handleClickOutside: () => Dropdown.handleClickOutside\n}\nexport default onClickOutside(Dropdown, clickOutsideConfig)","import React from \"react\";\n\n\n\n\nexport default function HeaderImage() {\n\n    return (\n        <img\n            src={process.env.PUBLIC_URL + '/landingHeader.png'}\n            alt='doctor healthcare image'\n            style={{ width: '100vw' }} />\n    )\n}","import React, { useEffect, useState } from 'react'\nimport './Wallet.css'\nimport { Segment, Message, Button } from 'semantic-ui-react'\n\nexport default function Wallet({ wallet, connect }) {\n\n    const ethereum = window.ethereum\n\n\n    async function test() {\n        const data = await ethereum.requestPermissions\n        console.log(data)\n    }\n\n    if (wallet) {\n        return (\n            <div id='walletMessage' style={{\n                height: 'fit-content',\n                color: 'red',\n                position: 'absolute',\n                left: '45%'\n            }}>\n                <Button onClick={test} style={{ textAlign: 'left', fontSize: '1em', padding: '.5em 1em', position: 'relative', top: '.5em', backgroundColor: '#00000020' }}>\n                    Connected\n                    <img src={process.env.PUBLIC_URL + 'metamask.png'} style={{ height: '2vh', position: 'relative', top: '.18em', left: '.3em' }} alt='MetaMask Icon' />\n\n                </Button>\n            </div>\n        )\n    } else {\n        return (\n            <div id='walletMessage' style={{\n                height: 'fit-content',\n                color: 'red',\n                position: 'absolute',\n                left: '45%'\n            }}>\n                <Button onClick={connect} style={{ textAlign: 'left', fontSize: '1em', padding: '.5em 1em', position: 'relative', top: '.5em', backgroundColor: '#00000020' }}>\n                    Connect Wallet\n                    <img src={process.env.PUBLIC_URL + 'metamask.png'} style={{ height: '2vh', position: 'relative', top: '.18em', left: '.3em' }} alt='MetaMask Icon' />\n\n                </Button>\n            </div>\n        )\n    }\n\n}","import React, { useState, useRef, useEffect } from 'react'\nimport { Icon } from 'semantic-ui-react'\nimport { Link, useLocation } from 'react-router-dom'\nimport './Navbar.css'\nimport Dropdown from './Dropdown/Dropdown'\nimport HeaderImage from '../MOLECULES/HeaderImage'\nimport WelcomeHeader from '../MOLECULES/WelcomeHeader'\nimport Wallet from '../Wallet/Wallet.jsx'\n\nexport default function Navbar({ wallet, user, handleLogout, setShow, show, connect }) {\n    const location = useLocation()\n    const [hover, setHover] = useState(false)\n    // Navbar.handleClickOutside = () => setShow(false);\n\n\n\n    function handleHover(e) {\n        e.preventDefault()\n        setHover(!hover)\n    }\n    function handleDropdown(e) {\n        e.preventDefault()\n        setShow(true)\n    }\n\n    function closeDropdown() {\n        setShow(false)\n    }\n\n    return (\n        <>\n            <div id='navCont'>\n                <Link to='/index' id='homeNavButton' onClick={closeDropdown}>Home</Link>\n                <Wallet wallet={wallet} connect={connect} />\n                {user ?\n                    (\n                        <><div id='dropdownCont' style={hover ? { color: 'blue' } : { color: 'black' }} onMouseOver={handleHover} onMouseOut={handleHover} onClick={handleDropdown}>\n                            <Icon id='profileIcon' size='large' className='user outline'></Icon>\n                            <Icon id='downArrowIcon' size='small' className='setting'></Icon>\n                        </div>\n                            {show ?\n                                (\n                                    <Dropdown setShow={setShow} handleLogout={handleLogout} />\n                                ) : null}\n                        </>)\n                    :\n                    (<Link to='/login' id='loggedUserNavButton' onClick={handleLogout}>Login/Register</Link>)\n                }\n            </div >\n            {location.pathname == '/index' ?\n                <WelcomeHeader />\n                :\n                <HeaderImage />\n            }\n        </>\n    )\n}","import React from 'react';\nimport './SuccessMessage.css'\n\nexport default function SuccessMessage(props) {\n    return (\n        <span style={{ color: 'green' }} className={\"error\"}>{props.success}</span>\n    )\n}","import tokenService from './tokenService';\n\nconst BASE_URL = '/api/clients/';\n\nasync function addClient(data) {\n    return fetch(BASE_URL + 'addclient', {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: \"Bearer \" + tokenService.getToken(),\n        },\n    }).then((res) => {\n        if (res.ok) return res.json();\n        throw new Error(\"Error Adding Client - Possible duplicate wallet address\");\n    });\n}\n\n\n\nexport default {\n    addClient\n};","import tokenService from './tokenService';\n\nconst BASE_URL = '/api/trials/';\n\nasync function addTrial(data) {\n    return fetch(BASE_URL + 'addtrial', {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: \"Bearer \" + tokenService.getToken(),\n        },\n    }).then((res) => {\n        if (res.ok) return res.json();\n        throw new Error(\"Error Adding Trial \");\n    });\n}\n\nasync function getTrials() {\n    return fetch(BASE_URL + 'gettrials', {\n        method: \"GET\",\n        headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: \"Bearer \" + tokenService.getToken(),\n        },\n    }).then((res) => {\n        if (res.ok) return res.json();\n        throw new Error(\"Error Getting Trials\");\n    });\n}\n\nasync function findClients(id) {\n    return fetch(BASE_URL + 'findclients/' + id, {\n        method: \"GET\",\n        headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: \"Bearer \" + tokenService.getToken(),\n        },\n    }).then((res) => {\n        if (res.ok) return res.json();\n        throw new Error(\"Error Getting Client Data\");\n    });\n}\n\n\n\n\nexport default {\n    addTrial,\n    getTrials,\n    findClients\n\n};","import React, { useState, useEffect } from \"react\";\nimport { Grid, Header, Form, Button, Checkbox, Input, Loader } from 'semantic-ui-react'\nimport './AddClient.css'\nimport ErrorMessage from '../../components/ErrorMessage/ErrorMessage'\nimport SuccessMessage from '../../components/SuccessMessage/SuccessMessage'\nimport clientService from '../../utils/clientService'\nimport { Slider } from '@mui/material'\nimport trialsService from \"../../utils/trialsService\";\nimport { ethers } from \"ethers\";\nimport { NFTStorage, File } from 'nft.storage';\n\n\nexport default function AddClient() {\n\n    const [error, setError] = useState()\n    const [trials, setTrials] = useState()\n    const [loading, setLoading] = useState(true)\n    const [success, setSuccess] = useState()\n    const [name, setName] = useState(true)\n    const [formInput, setFormInput] = useState({\n        name: '',\n        walletAddress: '',\n        percentageParticipated: 50,\n        trialIdentification: ''\n    })\n\n\n    const handleSlider = (e, value) => setFormInput({ ...formInput, ['percentageParticipated']: value });\n    const handleSelect = (e, { value }) => setFormInput({ ...formInput, ['trialIdentification']: value });\n\n    function handleInput(e) {\n\n        setFormInput({\n            ...formInput,\n            [e.target.name]: e.target.value,\n        });\n    }\n    async function handleValidation() {\n        let formIsValid = true;\n        if (!formInput.trialIdentification || formInput.trialIdentification == '') {\n            formIsValid = false\n            setError('Select a trial')\n        }\n        if (name == true && formInput.name.length < 4) {\n            formIsValid = false\n            setError('Check input of name')\n        }\n        if (formInput.walletAddress) {\n\n            try {\n                const data = await ethers.utils.getAddress(formInput.walletAddress)\n                if (data) {\n                }\n\n            } catch (err) {\n\n                formIsValid = false\n                if (err.argument) {\n                    setError('Invalid Wallet Address')\n                } else {\n                    setError(err.argument + ' has returned the following error: ' + err.code)\n                }\n\n            }\n        }\n        return formIsValid;\n    }\n\n    async function handleSubmit() {\n        if (await handleValidation() === true) {\n            try {\n                // const apiKey = process.env.NFT_STORAGE_KEY;\n                const apiKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDE4NkU1OTlmZmY1MjA4MTZBYTQ1M2Y3OTg1OWQzNDZmQTFmN2VmNTIiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTYzNzEwMjA2MDkzMiwibmFtZSI6IkZpcnN0QVBJS2V5In0.mPCR2jq5fCcRdUbKEGXfdxY8I9b3NuAxx9i6Y0EyhCE'\n                const client = new NFTStorage({ token: apiKey })\n                const metadata = await client.store({\n                    name: 'CliNFT',\n                    description: `${formInput.percentageParticipated} ${formInput.trialIdentification}`,\n                    image: new File(\n                        [],\n                        process.env.PUBLIC_URL + 'metamask.png',\n                        { type: 'image/png' }\n                    ),\n                })\n                console.log(metadata.url);\n\n                if (name == false) {\n                    const data = await clientService.addClient({\n                        name: 'CliNFT',\n                        percentageParticipated: formInput.percentageParticipated.toString(),\n                        walletAddress: formInput.walletAddress.toString(),\n                        trialIdentification: formInput.trialIdentification.toString()\n                    })\n                    setSuccess(data.msg)\n                } else {\n                    const data = await clientService.addClient(formInput)\n                    setSuccess(data.msg)\n                }\n            } catch (err) {\n                setError(err.message)\n            }\n        }\n    }\n\n    function toggleName() {\n        setName(!name)\n    }\n\n    useEffect(() => {\n        async function getTrials() {\n            setLoading(true)\n            let data = await trialsService.getTrials()\n            await setTrials(data.trials)\n            setLoading(false)\n        }\n        getTrials();\n    }, []);\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setError(null);\n        }, 3000);\n        return () => clearTimeout(timer);\n    }, [error]);\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setSuccess(null);\n        }, 3000);\n        return () => clearTimeout(timer);\n    }, [success]);\n\n    if (loading) {\n        return (\n            <Grid\n                textAlign=\"center\"\n                style={{ height: \"100vh\" }, { margin: '10em' }}\n                verticalAlign=\"middle\"\n            >\n                <Grid.Column style={{ maxWidth: 450 }}>\n                    <Loader size=\"large\" active>\n                        Loading\n                    </Loader>\n                </Grid.Column>\n            </Grid>\n        );\n    } else {\n\n        return (\n            <>\n                <Grid\n                    textAlign=\"center\"\n                    style={{ margin: \"1em\" }}\n                    verticalAlign=\"middle\"\n                >\n                    <Grid.Column style={{ maxWidth: 425 }}>\n                        <Header as=\"h2\" color=\"blue\" textAlign=\"center\">\n                            <span className=\"signupText\">Add Client Form</span>\n                        </Header><br />\n\n\n                        <Form autoComplete=\"off\">\n                            <div id='inputCont'>\n                                <label id='nameLabelClient' className='formLabel' style={name ? { color: 'black' } : { color: 'lightgray' }}>Name</label>\n                                <div id='checkboxCont'>\n                                    <label id='checkboxLabel' style={{ fontSize: '10px', marginRight: '-1em' }}> <i>Client Prefers to be Anonymous: </i></label>\n                                    <div id='boxCont' style={{ backgroundColor: '#00000030', padding: '0em .15em 0em .0em', borderRadius: '3px', height: '1.3em' }}>\n                                        <Checkbox id='checkBoxClient' onClick={toggleName} />\n                                    </div>\n                                </div>\n                            </div>\n                            <Form.Field>\n\n                                <Input\n                                    type=\"text\"\n                                    name=\"name\"\n                                    placeholder=\"Name of Client or Select Anon.\"\n                                    value={formInput.name}\n                                    onChange={handleInput}\n                                    disabled={name ? false : true}\n                                />\n                            </Form.Field>\n\n\n                            <label className='formLabel'>Wallet Address</label>\n                            <Form.Input\n                                name=\"walletAddress\"\n                                placeholder=\"Wallet Address\"\n                                value={formInput.walletAddress}\n                                onChange={handleInput}\n                                required\n                            />\n                            <br />\n\n\n                            <label className='formLabel'>Trial Identification</label>\n                            <Form.Select\n                                placeholder='Select Associated Trial'\n                                options={\n                                    trials.map(trial => {\n                                        return {\n                                            key: trial.name,\n                                            value: trial._id,\n                                            text: trial.name\n                                        }\n                                    })\n                                }\n                                onChange={handleSelect}\n                                required />\n                            <br />\n\n\n                            <label className='formLabel'>Percentage Completed</label><br />\n                            <Slider\n                                size='small'\n                                defaultValue={50}\n                                step={5}\n                                marks\n                                min={0}\n                                max={100}\n                                onChange={handleSlider}\n                                valueLabelDisplay='auto'\n                                style={{ color: 'rosybrown' }}\n                                color='secondary'\n                            />\n                            <br /><br />\n\n\n                            <Button onClick={handleSubmit} type=\"submit\" className=\"btn\" id=\"signupButton\">\n                                Submit\n                            </Button>\n\n                        </Form>\n\n                        {error ? <ErrorMessage error={error} /> : null}\n                        {success ? <SuccessMessage success={success} /> : null}\n                    </Grid.Column>\n                </Grid>\n            </>\n        );\n    }\n}","import React, { useState, useEffect } from \"react\";\nimport { Grid, Header, Form, Button, Input } from 'semantic-ui-react'\nimport './AddTrial.css'\nimport ErrorMessage from '../../components/ErrorMessage/ErrorMessage'\nimport SuccessMessage from '../../components/SuccessMessage/SuccessMessage'\nimport trialsService from \"../../utils/trialsService\";\n\n\nexport default function AddTrial() {\n\n    const [error, setError] = useState()\n    const [success, setSuccess] = useState()\n    const [formInput, setFormInput] = useState({\n        name: '',\n    })\n\n\n    function handleInput(e) {\n\n        setFormInput({\n            ...formInput,\n            [e.target.name]: e.target.value,\n        });\n    }\n\n    function handleValidation() {\n        let formIsValid = true;\n        if (formInput.trialIdentification == '' || formInput.trialIdentification == 'undefined') {\n            formIsValid = false\n            setError('Select a trial')\n        }\n        return formIsValid;\n    }\n\n\n    async function handleSubmit() {\n        if (handleValidation()) {\n            try {\n                const data = await trialsService.addTrial(formInput)\n                setSuccess(data.msg)\n            } catch (err) {\n                setError(err.message)\n            }\n        }\n    }\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setError(null);\n        }, 3000);\n        return () => clearTimeout(timer);\n    }, [error]);\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setSuccess(null);\n        }, 3000);\n        return () => clearTimeout(timer);\n    }, [success]);\n\n    return (\n        <>\n\n            <Grid\n                textAlign=\"center\"\n                style={{ margin: \"1em\" }}\n                verticalAlign=\"middle\"\n            >\n                <Grid.Column style={{ maxWidth: 425 }}>\n                    <Header as=\"h2\" color=\"blue\" textAlign=\"center\">\n                        <span className=\"signupText\">Add Trial</span>\n                    </Header><br />\n\n\n                    <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n                        <label id='nameLabelClient' className='formLabel' >Name Of Trial</label>\n                        <Form.Field>\n                            <Input\n                                type=\"text\"\n                                name=\"name\"\n                                placeholder=\"Name of Trial\"\n                                value={formInput.name}\n                                onChange={handleInput}\n                            />\n                        </Form.Field>\n\n                        <Button type=\"submit\" className=\"btn\" id=\"signupButton\">\n                            Submit\n                        </Button>\n\n                    </Form>\n\n                    {error ? <ErrorMessage error={error} /> : null}\n                    {success ? <SuccessMessage success={success} /> : null}\n                </Grid.Column>\n            </Grid>\n        </>\n    );\n}","import React, { useState, useEffect } from 'react'\nimport './TrialsFind.css'\nimport { Form, Grid, Loader, Table, Button } from 'semantic-ui-react'\nimport trialsService from '../../../utils/trialsService'\nimport ErrorMessage from '../../ErrorMessage/ErrorMessage'\n\n\nexport default function TrialsFind(props) {\n    const [loading, setLoading] = useState(false)\n    const [show, setShow] = useState(true)\n    const [error, setError] = useState()\n    const [currentTrial, setCurrentTrial] = useState()\n    const [formInput, setFormInput] = useState({\n        trial: ''\n    })\n    const [clients, setClients] = useState()\n\n\n    function handleSelect(e, { value }) {\n        setFormInput({ ...formInput, ['trial']: value })\n        setCurrentTrial(value)\n    }\n\n    function toggle(e) {\n        e.preventDefault()\n        setShow(true)\n    }\n\n    async function backendPayload(arr, trial) {\n        let payload = { trialId: trial, participants: arr }\n        console.log(payload)\n    }\n\n\n    function percentByTrial(client) {\n        let trials = client.trials\n        for (let i = 0; i < trials.length; i++) {\n            if (trials[i].trialIdentification === formInput.trial) {\n                return trials[i].percentageCompleted\n            } else {\n                console.log(false)\n            }\n        }\n    }\n\n    async function selectHandler(e) {\n        e.preventDefault()\n        setLoading(true)\n        const data = await trialsService.findClients(formInput.trial)\n        setClients(data.clients)\n        setShow(false)\n        setLoading(false)\n\n    }\n\n    async function handleDividends() {\n        const clientPayload = []\n        clients.forEach((client) => {\n            client.trials.forEach((trial, i) => {\n                if (trial.trialIdentification === currentTrial) {\n                    clientPayload.push(trial)\n                }\n            })\n        })\n        try {\n            backendPayload(clientPayload, currentTrial)\n            // history.push('/success')\n        } catch (err) {\n            setError(err)\n        }\n    }\n\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setError(null);\n        }, 3000);\n        return () => clearTimeout(timer);\n    }, [error]);\n\n    if (loading) {\n        return (\n            <Grid\n                textAlign=\"center\"\n                style={{ height: \"50vh\" }, { margin: '10em' }}\n                verticalAlign=\"middle\"\n            >\n                <Grid.Column style={{ maxWidth: 450 }}>\n                    <Loader size=\"large\" active>\n                        Loading\n                    </Loader>\n                </Grid.Column>\n            </Grid>\n        );\n    } else {\n\n        if (show == true) {\n            return (\n\n                <Form>\n                    <label>Find clients of trial</label>\n                    <br /><br />\n                    <Form.Select\n                        placeholder='Select Associated Trial'\n                        id='TrialFindSelect'\n                        options={\n                            props.trials.map(trial => {\n                                return {\n                                    key: trial.name,\n                                    value: trial._id,\n                                    text: trial.name\n                                }\n                            })\n                        }\n                        onChange={handleSelect}\n                        required\n                    /> <Form.Button id='TrialFindButtonForm' size='mini' onClick={selectHandler}>Search</Form.Button>\n                </Form>\n\n            )\n        } else if (!show) {\n            return (\n                <>\n                    <Table unstackable celled compact='very'>\n                        <Table.Header>\n                            <Table.Row>\n                                <Table.HeaderCell width={8}>ETH Wallet Address</Table.HeaderCell>\n                                <Table.HeaderCell width={1} >% Completed</Table.HeaderCell>\n                            </Table.Row>\n                        </Table.Header>\n\n                        <Table.Body>\n                            {clients.map((client, i) => {\n                                return (\n                                    <>\n                                        <Table.Row key={i}>\n                                            <Table.Cell key={i, 0} style={{ fontSize: '10px' }}>{client.walletAddress}</Table.Cell>\n                                            <Table.Cell key={i, 1}>{percentByTrial(client)}</Table.Cell>\n                                        </Table.Row>\n                                    </>\n                                )\n                            })}\n                        </Table.Body>\n                        <Table.Footer></Table.Footer>\n                    </Table>\n                    <Button style={{ marginRight: '2em' }} onClick={toggle}>Select Another Trial</Button>\n                    <Button onClick={handleDividends}>Send Dividends</Button>\n                    <ErrorMessage error={error} />\n                </>\n            )\n        }\n\n    }\n}\n","import React, { useState, useEffect } from 'react'\nimport { Segment, Header, Loader, Grid } from 'semantic-ui-react'\nimport trialsService from '../../utils/trialsService'\nimport './Find.css'\nimport TrialsFind from '../../components/Find/Trials/TrialsFind'\nimport { useHistory } from 'react-router-dom'\n\nexport default function Find(props) {\n    const history = useHistory()\n    const [trials, setTrials] = useState()\n    const [loading, setLoading] = useState(true)\n    const [error, setError] = useState()\n\n    useEffect(() => {\n        async function getTrials() {\n            setLoading(true)\n            let data = await trialsService.getTrials()\n            await setTrials(data.trials)\n            setLoading(false)\n        }\n        getTrials();\n    }, []);\n\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setError(null);\n        }, 3000);\n        return () => clearTimeout(timer);\n    }, [error]);\n\n\n    if (loading) {\n        return (\n            <Grid\n                textAlign=\"center\"\n                style={{ height: \"100vh\" }, { margin: '10em' }}\n                verticalAlign=\"middle\"\n            >\n                <Grid.Column style={{ maxWidth: 450 }}>\n                    <Loader size=\"large\" active>\n                        Loading\n                    </Loader>\n                </Grid.Column>\n            </Grid>\n        );\n    } else {\n        return (\n            <Segment style={{ maxWidth: 450, margin: 'auto', marginTop: '1em', border: 'none' }}>\n                <Header>\n                    Find\n                </Header>\n                <TrialsFind trials={trials} />\n\n            </Segment>\n        )\n    }\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './Home.css'\nimport { Button, Segment } from 'semantic-ui-react'\n\n\n\n\n\nexport default function Home() {\n\n    return (\n        <>\n            <Segment style={{ maxWidth: 425, margin: 'auto', marginTop: '2em' }}>\n                <h2>Welcome to C.T.S.</h2>\n                <br />\n                <p>C.T.S. is an NFT(Non-fungible Token) minting and payment service designed to\n                    support both manufacturing companies and trial participants alike. </p>\n                <p>\n                    Through this one of a kind DApp (Decentralized Application), Doctors/Clinicians can add their\n                    clients unique Etherium wallet addresses, and issue an NFT for participation\n                    in a particular Clinical Trial.\n                </p>\n                <p>\n                    Participants are minted an NFT based upon their participation in each trial, and\n                    that NFT provides both validity of participation, as well as the amount of the study\n                    they completed.\n                </p>\n                <p>\n                    At the end of a study, should the drug become FDA approved and go to market,\n                    C.T.S. (through smart contracts on the block-chain) will dispurse a percentage of\n                    the total revenue of that medication, and share earnings to those who participated\n                    in the original clinical study, via verification of the previously minted NFT.\n                </p>\n\n            </Segment>\n            <div style={{ marginTop: '1em', marginBottom: '6em' }}>\n                <Link to='/login'><Button style={{ marginRight: '10em' }}>Login</Button></Link>\n                <Link to='register'><Button >Register</Button></Link>\n            </div>\n            &nbsp;\n        </>\n    )\n}","import React, { useState } from 'react';\nimport { Redirect, Route, Switch, useHistory } from 'react-router-dom';\nimport './App.css';\nimport SignupPage from '../SignupPage/SignupPage';\nimport LoginPage from '../LoginPage/LoginPage';\nimport userService from '../../utils/userService'\nimport Navbar from '../../components/Navbar/Navbar'\nimport Footer from '../../components/Footer/Footer';\nimport AddClient from '../AddClient/AddClient';\nimport AddTrial from '../AddTrial/AddTrial';\nimport Find from '../Find/Find';\nimport Home from '../Home/Home';\nimport { ethers } from 'ethers';\nimport detectEthereumProvider from '@metamask/detect-provider';\n\nfunction App() {\n  // MetaMask stuff\n  const ethereum = window.ethereum\n  const [currentWallet, setCurrentWallet] = useState()\n\n  let currentAccount = null;\n  ethereum\n    .request({ method: 'eth_accounts' })\n    .then(handleAccountsChanged)\n    .catch((err) => {\n      // Some unexpected error.\n      // For backwards compatibility reasons, if no accounts are available,\n      // eth_accounts will return an empty array.\n      console.error(err, 'here');\n    });\n\n  function handleAccountsChanged(accounts) {\n    if (accounts.length === 0) {\n      // MetaMask is locked or the user has not connected any accounts\n      console.log('Please connect to MetaMask.');\n    } else if (accounts[0] !== currentAccount) {\n      currentAccount = accounts[0];\n      setCurrentWallet(currentAccount)\n    }\n  }\n\n  function connect() {\n    ethereum\n      .request({ method: 'eth_requestAccounts' })\n      .then(handleAccountsChanged)\n      .catch((err) => {\n        if (err.code === 4001) {\n          // EIP-1193 userRejectedRequest error\n          // If this happens, the user rejected the connection request.\n          console.log('Please connect to MetaMask.');\n        } else {\n          console.error(err);\n        }\n      });\n  }\n  // end MetaMask\n  const history = useHistory()\n  const [show, setShow] = useState(false)\n  const [user, setUser] = useState(userService.getUser()) // getUser decodes our JWT token, into a javascript object\n  // this object corresponds to the jwt payload which is defined in the server signup or login function that looks like \n  // this  const token = createJWT(user); // where user was the document we created from mongo\n\n  function handleSignUpOrLogin() {\n    setUser(userService.getUser()) // getting the user from localstorage decoding the jwt\n  }\n\n  function handleLogout() {\n    userService.logout();\n    setUser({ user: null })\n  }\n\n  return (\n    <div className=\"App\">\n      <Navbar wallet={currentWallet} connect={connect} user={userService.getUser()} handleLogout={handleLogout} setShow={setShow} show={show} />\n      <Switch>\n        {/* {user !== null ? */}\n        <Route exact path=\"/login\">\n          <LoginPage handleSignUpOrLogin={handleSignUpOrLogin} />\n        </Route>\n        <Route exact path=\"/register\">\n          <SignupPage handleSignUpOrLogin={handleSignUpOrLogin} />\n        </Route>\n\n        <Route path=\"/index\">\n          <Home />\n        </Route>\n        {user ?\n          <>\n            <Switch>\n              <Route exact path='/profile'>\n                profile page here!\n              </Route>\n              <Route exact path='/addclient'>\n                <AddClient />\n              </Route>\n              <Route exact path='/addtrial'>\n                <AddTrial />\n              </Route>\n              <Route exact path='/find'>\n                <Find user={user} />\n              </Route>\n            </Switch>\n          </>\n          :\n          <Redirect to='/index' />\n        }\n\n      </Switch>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './pages/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router><App/></Router>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}